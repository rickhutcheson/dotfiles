(add-to-list 'load-path "/Users/rick/.emacs.d/tern-emacs/tern/emacs/")

(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" ""(shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(set-exec-path-from-shell-PATH)

(require 'package)

(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

;; list the packages you want
(setq required-package-list '(web-beautify js2-mode nodejs-repl less-css-mode spacegray-theme))

;; activate all the packages (in particular autoloads)
(package-initialize)

;; fetch the list of packages available
(unless (file-exists-p package-user-dir)
  (package-refresh-contents))

;; install the missing packages
(dolist (package required-package-list)
  (unless (package-installed-p package)
    (package-install package)))

(if (eq system-type 'darwin)
    (set-frame-font "Menlo-12")
    (set-frame-font "Monaco-11"))

;; fits height at 1920x1080 (with  Monaco-11 font on  OS X)
(add-to-list 'default-frame-alist '(height . 66))
(setq-default line-spacing 0.10)

;; 80 chars + room for fringe
(add-to-list 'default-frame-alist '(width . 88))

;; Use this instead for disabling anti-aliasing
;;defaults write org.gnu.Emacs AppleAntiAliasingThreshold 999
;; In order for this to take effect, you must use the following command:
;defaults write org.gnu.Emacs FontBackend ns
;(setq mac-allow-anti-aliasing nil)

;; Light Theme
;; (load-theme 'sanityinc-tomorrow-day t)
;; (load-theme 'leuven t)
;;(load-theme 'tango t)
(load-theme 'spacegray t)
;; (load-theme 'soft-morning t)

(setq backup-by-copying t               ; don't clobber symlinks
      backup-directory-alist '(("." . "~/.emacs.d/backups"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)                ; use versioned backups

;; no bells
(setq visible-bell t)

;; Doesn't work on OS X
;; (setq ring-bell-function (lambda () (play-sound-file ".emacs.d/sounds/goron_oop.au")))

;; naked emacs
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)
(set-default 'cursor-type '(hbar . 1))

;; Prevent the cursor from blinking
(global-linum-mode t)
(column-number-mode t)
 
;; Don't use messages that you don't read
(setq initial-scratch-message "")
(setq inhibit-startup-message t)

;; SPACES / TABS
(setq-default indent-tabs-mode nil)
;; web-beautify specifics

;; This constant is internal to web-beautify, but I haven't found
;; another way to define options *globally*
(require 'web-beautify)
(defconst web-beautify-args '("-s" "2" "-w" "80" "-f" "-"))

;; css-mode specifics
(setq css-indent-offset 2)

;; helm specifics
;(add-to-list 'load-path "/Users/rick/.emacs.d/helm/emacs-async")
;(add-to-list 'load-path "/Users/rick/.emacs.d/helm/emacs-helm")
;(require 'helm-config)
;; js2-mode specifics
;; basic options

;; associate with '.js' files
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.emacs\\'" . emacs-lisp-mode))
(setq js2-basic-offset 2)

;; auto-beautify on save
(eval-after-load 'js2-mode
  (lambda ()
    (require 'nodejs-repl)
    (define-key js2-mode-map (kbd "C-c b") 'web-beautify-js)
    (linum-mode)))

(eval-after-load 'html-mode
  (lambda ()
    (define-key html-mode-map (kbd "C-c b") 'web-beautify-html)
    (linum-mode)))

(eval-after-load 'css-mode
  (lambda ()
    (define-key css-mode-map (kbd "C-c b") 'web-beautify-css)
    (linum-mode)))

(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
;; add support for tern

(autoload 'tern-mode "tern.el" nil t)

