;;; dot-emacs --- Personal Emacs configuration

;; Author Rick Hutcheson <rick@oddlyaccurate.com>

;; This file is not part of GNU Emacs.

;;; Commentary
;; Before performing any configuration, we download and
;; install all required packages. Loading config file will have
;; side-effects.

;;; Code

(add-to-list 'load-path "~/Environment/Utilities/Emacs/flycheck")
(add-to-list 'load-path "~/Environment/Utilities/Emacs/tern/emacs")
(add-to-list 'load-path "~/Environment/Utilities/Emacs/async")
(add-to-list 'load-path "~/.emacs.d/CustomModes/cweb.el")
; (add-to-list 'load-path "~/.emacs.d/CustomModes")

(defun set-exec-path-from-shell-PATH ()
  "Set `execpath` and PATH environment variable to match user's $PATH."
  (interactive)
  (let ((path-from-shell
         (replace-regexp-in-string
          "[ \t\n]*$" ""(shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(set-exec-path-from-shell-PATH)


;; =====================================================================
;; Packages
;; =====================================================================

(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
       ("melpa" . "http://melpa.org/packages/")
       ("elpy" . "http://jorgenschaefer.github.io/packages/")))


;; ---------------------------------------------------------------------
;; Required Packages
;; ---------------------------------------------------------------------

(defvar required-package-list
  '(
    ;; appearance
    gruvbox-theme

    ;; general
    company            ; auto-completion framework (actively maintained)
    flycheck           ; auto-lint source files (must config for each lang)
    flycheck-pos-tip   ; show error under point
    magit
    simp
    smex

    ;; Golang
    go-mode

    ;; HTML & CSS-like
    less-css-mode
    web-mode           ; replaces html-mode

    ;; JavaScript
    web-beautify       ; code beautifying
    js2-mode           ; syntax-highlighting, linting, etc.

    ;; markdown
    markdown-mode
    pandoc-mode

    ;; PHP
    php-mode

    ;; Python
    auto-complete
    python-environment
    jedi
    )
  "Packages installed @ startup")

;; activate all the packages (in particular autoloads)
(package-initialize)

;; refresh package contents
(defvar needs-packages nil)
(dolist (package required-package-list)
  (unless (package-installed-p package)
    (setq needs-packages t)))

;; install the missing packages
(when needs-packages (package-refresh-contents))

(when needs-packages
  (dolist (package required-package-list)
    (unless (package-installed-p package)
      (package-install package))))


;; =====================================================================
;; general
;; =====================================================================

;; ---------------------------------------------------------------------
;; required packages
;; ---------------------------------------------------------------------
(require 'company)
(require 'flycheck)
(require 'flymake)
(require 'ido)
(require 'smex)
(require 'simp)


;; ---------------------------------------------------------------------
;; appearance
;; ---------------------------------------------------------------------

;; WINDOWS
;; this is necessary for maximized emacs windows to not have a "gap" at the top / bottom for macOS.
;;
(add-hook 'after-init-hook 'toggle-frame-maximized)

;; SPACES / TABS
(setq-default indent-tabs-mode nil)

;; FONTS
; (set-frame-font "-xos4-Terminus-normal-normal-normal-*-16-*-*-*-c-80-iso10646-1")
; (set-frame-font "-*-Monaco-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")
(set-frame-font "-*-Monaco-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")
;(set-frame-font "-*-TheSansMono-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1")
;; In order for this to take effect, you must use the following command--
;; defaults write org.gnu.Emacs FontBackend ns
; (setq mac-allow-anti-aliasing nil)

(setq-default line-spacing 0.02)

;; 80 chars + room for fringe
(add-to-list 'default-frame-alist '(width . 88))

;; dark theme
(load-theme 'gruvbox t)

;; naked emacs
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)
(set-default 'cursor-type '(hbar . 1))

;; Show line numbers (and pad them a little)
(global-linum-mode t)
(column-number-mode t)
(setq linum-format "%d ")

;; Don't use messages that you don't read
(setq initial-scratch-message "")
(setq inhibit-startup-message t)

;; ---------------------------------------------------------------------
;; backup
;; ---------------------------------------------------------------------

;; backup locations
(defconst emacs-tmp-dir  "~/.emacs.d/backups")
(setq backup-directory-alist
      `((".*" . ,emacs-tmp-dir)))
(setq auto-save-file-name-transforms
      `((".*" ,emacs-tmp-dir t)))

;; backup behavior
(setq version-control t            ; use versioned backups
      delete-old-versions t
      kept-new-versions 10
      kept-old-versions 10
      backup-by-copying t)         ; don't clobber symlinks


;; ---------------------------------------------------------------------
;; navigation
;; ---------------------------------------------------------------------

;; Since most of my dotfiles are symlinked from the `dotfiles` repo,
;; this setting allows us to edit them without vc asking whether to
;; follow the symlink each time.
(setq vc-follow-symlinks t)


;; ---------------------------------------------------------------------
;; sounds
;; ---------------------------------------------------------------------

(setq visible-bell t)
;; These sounds got annoying

;; (unless (and (fboundp 'play-sound-internal)
;;              (subrp (symbol-function 'play-sound-internal)))
;; (require 'play-sound))

;; (setq ring-bell-function (lambda () (play-sound-file "~/.emacs.d/goron-oop.wav")))
;; (setq ring-bell-function (lambda () (play-sound-file "~/.emacs.d/voltage.wav")))


;; ---------------------------------------------------------------------
;; functions
;; ---------------------------------------------------------------------

(defun layout-django ()
   "Lay out the frame as two 80-column windows."
   (interactive)
   (split-window-right 110)) ; 100 chars + fringe

(defun fill-to-end ()
  (interactive)
  (save-excursion
    (end-of-line)
    (while (< (current-column) 72)
      (insert-char ?-))))

;; ---------------------------------------------------------------------
;; global hooks
;; ---------------------------------------------------------------------

(add-hook 'before-save-hook 'delete-trailing-whitespace)


;; ---------------------------------------------------------------------
;; global key bindings
;; ---------------------------------------------------------------------
(global-set-key (kbd "C-c l d") 'layout-django)
(global-set-key (kbd "C-c g") 'magit-status)
(setq  x-meta-keysym 'super
       x-super-keysym 'meta)


;; =====================================================================
;; Mode-Specific Customizations
;; =====================================================================


;; ---------------------------------------------------------------------
;; cc-mode
;; ---------------------------------------------------------------------

(setq c-basic-offset 2)
(add-hook 'c-mode-hook 'auto-fill-mode)
(add-hook 'c-mode-hook 'company-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
;; auto-fill quotes /parens / braces
(add-hook 'c-mode-hook 'electric-pair-mode)
;; highlight matching parens
(add-hook 'c-mode-hook 'show-paren-mode)
(add-hook 'c-mode-hook
          (lambda ()
            ;; load our custom style file
            (load-file "~/.emacs.d/resc-c-style.el")
            (c-set-style "resc")
            ;; Add RESC_HOME to our include path for flycheck
            ;; gets everything but trailing newline
            (setq flycheck-clang-include-path
                  (list
                   (concat
                    (substring (shell-command-to-string "$SHELL --login -i -c 'echo $RESC_HOME'") 0 -1)
                    "/src/base")

                   (concat
                    (substring (shell-command-to-string "$SHELL --login -i -c 'echo $RESC_HOME'") 0 -1)
                    "/src/")

                   "/rick/Repositories/kilo/src/components"))
            ;; allow completing from #included header files
            (add-to-list 'company-backends 'company-c-headers)
            (setq c-basic-offset 2)
            ;; on macOS, we can setup clang-format
            (when (eq system-type 'darwin)
              ;; find & load clang-format.el
              ;; it lives in the brew prefix for
              ;; find clang-format so we can find clang-format.el
              ;; (note that the shell command ends with a trailing newline we have to strip
              (load (concat
                     (substring (shell-command-to-string "brew --prefix clang-format") 0 -1)
                    "/share/clang/clang-format.el"))
              (add-hook 'before-save-hook
                        'clang-format-buffer
                        t  ; append to existing value
                        t  ; buffer-local (important, since we don't want tof
                        ))))


;; ---------------------------------------------------------------------
;; common lisp
;; ---------------------------------------------------------------------

(setq inferior-lisp-program "/usr/local/bin/clisp")
(add-hook 'lisp-mode-hook 'auto-fill-mode)

;; ---------------------------------------------------------------------
;; company
;; ---------------------------------------------------------------------

(define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
;; don't wait to autocomplete
(setq company-idle-delay 0.05)


;; ---------------------------------------------------------------------
;; dired
;; ---------------------------------------------------------------------

(setq-default dired-use-ls-dired nil)


;; ---------------------------------------------------------------------
;; eshell
;; ---------------------------------------------------------------------

(setq eshell-aliases-file "~/Environment/Config/Emacs/eshell-aliases")


;; ---------------------------------------------------------------------
;; flycheck
;; ---------------------------------------------------------------------

;; ask flycheck to use same load path as emacs
;; otherwise, it complains about third-party (require) calls
(setq-default flycheck-emacs-lisp-load-path 'inherit)

;; (add-hook 'after-init-hook #'global-flycheck-mode)

(setq flycheck-indication-mode 'right-fringe)

(setq flycheck-check-syntax-automatically '(mode-enabled save idle-change))

;; idle time before check in SECONDS
(setq flycheck-idle-change-delay 2)


;; ---------------------------------------------------------------------
;; flycheck-pos
;; ---------------------------------------------------------------------


(with-eval-after-load 'flycheck
  (flycheck-pos-tip-mode))

;; ---------------------------------------------------------------------
;; Golang
;; ---------------------------------------------------------------------

(require 'go-mode)
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

(eval-after-load 'go-mode
  (lambda ()
    (add-hook 'before-save-hook 'gofmt-before-save nil t)))


;; ---------------------------------------------------------------------
;; ido / smex
;; ---------------------------------------------------------------------

(ido-mode t)
(setq ido-enable-flex-matching t)

(smex-initialize)

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)

;; old M-x
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)


;; ---------------------------------------------------------------------
;; MMIX (Assembly Language from TAoCP)
;; ---------------------------------------------------------------------

(autoload 'mmix-mode "mmix-mode"
  "Major mode for editing MMIX Assembly files"
  t)
(add-to-list 'auto-mode-alist '("\\.mms\\'" . mmix-mode))


;; ---------------------------------------------------------------------
;; PHP
;; ---------------------------------------------------------------------

(setq-default flymake-phpcs-show-rule t)
(setq-default flymake-phpcs-standard "~/.emacs.d/UdemyPHPStandard")

(add-hook 'php-mode-hook (lambda ()
                           (flymake-php-load)
                           (flymake-phpcs-load)

                           (define-key php-mode-map (kbd "C-c m")
                             (lambda () (interactive) (eshell-command "udemy_php_make")))))


;; ---------------------------------------------------------------------
;; simp
;; ---------------------------------------------------------------------


;; define what a project directory should look like
(simp-project-define
 '(:has (.git)
   :ignore (.git)))
;; customize search behavior; ido is awesome
(setq-default simp-completing-read-command (quote ido-completing-read))

;; keys
(global-set-key (kbd "C-c f") 'simp-project-find-file)
(global-set-key (kbd "C-c d") 'simp-project-root-dired)
(global-set-key (kbd "C-c s") 'simp-project-rgrep)
(global-set-key (kbd "C-c S") 'simp-project-rgrep-dwim)
; (global-set-key (kbd "C-c b") 'simp-project-ibuffer-files-only)
; (global-set-key (kbd "C-c B") 'simp-project-ibuffer)
; (global-set-key (kbd "C-c C-f") 'simp-project-with-bookmark-find-file)
; (global-set-key (kbd "C-c C-s") 'simp-project-with-bookmark-rgrep)
; (global-set-key (kbd "C-c C-b") 'simp-project-with-bookmark-ibuffer)


;; ---------------------------------------------------------------------
;; TeX
;; ---------------------------------------------------------------------

(add-to-list 'auto-mode-alist '("\\.tex\\'" . tex-mode))
(add-hook 'tex-mode-hook 'auto-fill-mode)


;; =====================================================================
;; Emacs lisp
;; =====================================================================

(add-to-list 'auto-mode-alist '("\\.emacs\\'" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("\\dot-emacs\\'" . emacs-lisp-mode))


;; =====================================================================
;; HTML & CSS-like
;; =====================================================================

;; ---------------------------------------------------------------------
;; css-mode
;; ---------------------------------------------------------------------

(setq-default css-indent-offset 4)

(eval-after-load 'css-mode
  (lambda ()
    (define-key css-mode-map (kbd "C-c b") 'web-beautify-css)
    (linum-mode)))

;; ---------------------------------------------------------------------
;; web-mode
;; ---------------------------------------------------------------------

(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.twig\\'" . web-mode))

(eval-after-load 'web-mode
  (lambda ()
    (define-key web-mode-map (kbd "C-c b") 'web-beautify-html)
    (linum-mode)))


;; =====================================================================
;; JavaScript
;; =====================================================================

;; ---------------------------------------------------------------------
;; js2-mode
;; ---------------------------------------------------------------------

;; associate with '.js' files
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(setq-default js2-basic-offset 2)


;; ---------------------------------------------------------------------
;; web-beautify
;; ---------------------------------------------------------------------

;; This constant is internal to web-beautify, but I haven't found
;; another way to define options *globally*
(defconst web-beautify-args '("-s" "4" "-w" "80" "-f" "-"))

;; automatic checking
(add-hook 'js2-mode-hook 'flycheck-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
(setq js2-highlight-level 3)
;; auto-beautify on save
(eval-after-load 'js2-mode
  (lambda ()
    (require 'web-beautify)
    (define-key js2-mode-map (kbd "C-c b") 'web-beautify-js)
    (linum-mode)))


;; ---------------------------------------------------------------------
;; tern
;; ---------------------------------------------------------------------

(autoload 'tern-mode "tern.el" nil t)
(add-hook 'js-mode-hook (lambda () (tern-mode t)))

(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))

;; =====================================================================
;; markdown
;; =====================================================================

(setq-default markdown-command "pandoc")
(setq-default markdown-open-command "/usr/local/bin/mark")

;; =====================================================================
;; Python
;; =====================================================================

;; Popup on errors
(setq py-python-command "python3")
(setq-default python-inent-offset 4)
(setq-default python-indent-offset 4)

;; autocomplete
(require 'python-environment)
(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))
(add-hook 'python-mode-hook 'my/python-mode-hook)
(setq jedi:environment-virtualenv
      '("/rick/Environment/Utilities/Python/Envs/taocp/bin/virtualenv"))
(add-hook 'python-mode-hook
          (lambda() (define-key python-mode-map (kbd "s-b") 'jedi:goto-definition)))

(add-hook 'python-mode-hook
          (lambda() (python-black-on-save-mode)))


;; ---------------------------------------------------------------------
;; required variables
;; ---------------------------------------------------------------------

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#3c3836" "#fb4934" "#b8bb26" "#fabd2f" "#83a598" "#d3869b" "#8ec07c" "#ebdbb2"])
 '(company-c-headers-path-user
   (quote
    ("/rick/Repositories/resC/src/base" "/rick/Repositories/resC/src/components/a" "/rick/Repositories/kilo/src/components")))
 '(company-clang-arguments
   (quote
    ("-I/rick/Repositories/resC/src" "-I/rick/Repositories/resC/src/base" "-I/rick/Repositories/kilo/src/components")))
 '(custom-safe-themes
   (quote
    ("b89ae2d35d2e18e4286c8be8aaecb41022c1a306070f64a66fd114310ade88aa" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "1436d643b98844555d56c59c74004eb158dc85fc55d2e7205f8d9b8c860e177f" "d91ef4e714f05fff2070da7ca452980999f5361209e679ee988e3c432df24347" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "0598c6a29e13e7112cfbc2f523e31927ab7dce56ebb2016b567e1eff6dc1fd4f" "a22f40b63f9bc0a69ebc8ba4fbc6b452a4e3f84b80590ba0a92b4ff599e53ad0" "585942bb24cab2d4b2f74977ac3ba6ddbd888e3776b9d2f993c5704aa8bb4739" "8f97d5ec8a774485296e366fdde6ff5589cf9e319a584b845b6f7fa788c9fa9a" "8d805143f2c71cfad5207155234089729bb742a1cb67b7f60357fdd952044315" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" default)))
 '(package-selected-packages
   (quote
    (graphql-mode yaml-mode python-black company-jedi tern-auto-complete tern darkroom kotlin-mode spacemacs-theme spacegray-theme jedi python-environment auto-complete js2-mode go-mode slime-company slime solarized-theme gruvbox-theme company-c-headers company sublimity writeroom-mode csv-mode sphinx-doc sphinx-mode flycheck-pycheckers pyvenv ein color-theme-sanityinc-tomorrow web-beautify lua-mode smex web-mode simp railscasts-theme php-mode pandoc-mode markdown-mode magit less-css-mode flycheck-pos-tip))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(markdown-bold-face ((t (:inherit bold :foreground "White"))))
 '(markdown-code-face ((t (:inherit fixed-pitch :foreground "#8B9fA8" :height 1.1 :family "TheSansMono"))))
 '(markdown-italic-face ((t (:inherit italic :foreground "tomato"))))
 '(markdown-pre-face ((t (:foreground "#8B9fA8" :height 1.1 :family "TheSansMono")))))
