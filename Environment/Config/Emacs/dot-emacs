(add-to-list 'load-path "~/Environment/Utilities/Emacs/tern/emacs")
(add-to-list 'load-path "~/Environment/Utilities/Emacs/helm")
(add-to-list 'load-path "~/Environment/Utilities/Emacs/async")


(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" ""(shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(set-exec-path-from-shell-PATH)

(require 'package)

(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

;; list the packages you want
(setq required-package-list '(web-beautify js2-mode nodejs-repl less-css-mode spacegray-theme simp))
;; activate all the packages (in particular autoloads)
(package-initialize)

;; refresh package contents
;; HACK: This should really only run once, not for every package.
(dolist (package required-package-list)
  (unless (package-installed-p package)
    (package-refresh-contents)))

;; install the missing packages
(dolist (package required-package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'helm)
(require 'helm-config)
(require 'simp)

(if (eq system-type 'darwin)
    (set-frame-font "Bitstream Vera Sans Mono-11")
    (set-frame-font "Ubuntu Mono-15"))

(setq-default line-spacing 0.10)

;; 80 chars + room for fringe
(add-to-list 'default-frame-alist '(width . 88))

;; Use this instead for disabling anti-aliasing
;;defaults write org.gnu.Emacs AppleAntiAliasingThreshold 999
;; In order for this to take effect, you must use the following command:
;defaults write org.gnu.Emacs FontBackend ns
;(setq mac-allow-anti-aliasing nil)

;; Light Theme
;; (load-theme 'sanityinc-tomorrow-day t)
;; (load-theme 'leuven t)
;;(load-theme 'tango t)
(load-theme 'tango t)
;; (load-theme 'soft-morning t)

(setq backup-by-copying t               ; don't clobber symlinks
      backup-directory-alist '(("." . "~/.emacs.d/backups"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)                ; use versioned backups

;; no bells
(setq visible-bell t)

;; Doesn't work on OS X
;; (setq ring-bell-function (lambda () (play-sound-file ".emacs.d/sounds/goron_oop.au")))

;; naked emacs
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)
(set-default 'cursor-type '(hbar . 1))

;; Prevent the cursor from blinking
(global-linum-mode t)
(column-number-mode t)
 
;; Don't use messages that you don't read
(setq initial-scratch-message "")
(setq inhibit-startup-message t)

;; SPACES / TABS
(setq-default indent-tabs-mode nil)
;; web-beautify specifics

;; This constant is internal to web-beautify, but I haven't found
;; another way to define options *globally*
(require 'web-beautify)
(defconst web-beautify-args '("-s" "2" "-w" "80" "-f" "-"))

;; css-mode specifics
(setq css-indent-offset 2)
;; js2-mode specifics
;; basic options

;; associate with '.js' files
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.emacs\\'" . emacs-lisp-mode))
(setq js2-basic-offset 2)

;; auto-beautify on save
(eval-after-load 'js2-mode
  (lambda ()
    (require 'nodejs-repl)
    (define-key js2-mode-map (kbd "C-c b") 'web-beautify-js)
    (linum-mode)))

(eval-after-load 'html-mode
  (lambda ()
    (define-key html-mode-map (kbd "C-c b") 'web-beautify-html)
    (linum-mode)))

(eval-after-load 'css-mode
  (lambda ()
    (define-key css-mode-map (kbd "C-c b") 'web-beautify-css)
    (linum-mode)))

(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
;; add support for tern

(autoload 'tern-mode "tern.el" nil t)

;; helm specifics

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode t)
(simp-project-define
 '(:has (.git)
   :ignore (.git)))
;; I bind the handy stuff like so:
(global-set-key (kbd "C-c f") 'simp-project-find-file)
(global-set-key (kbd "C-c d") 'simp-project-root-dired)
(global-set-key (kbd "C-c s") 'simp-project-rgrep)
(global-set-key (kbd "C-c S") 'simp-project-rgrep-dwim)
(global-set-key (kbd "C-c b") 'simp-project-ibuffer-files-only)
(global-set-key (kbd "C-c B") 'simp-project-ibuffer)
(global-set-key (kbd "C-c C-f") 'simp-project-with-bookmark-find-file)
(global-set-key (kbd "C-c C-s") 'simp-project-with-bookmark-rgrep)
(global-set-key (kbd "C-c C-b") 'simp-project-with-bookmark-ibuffer)

(add-hook 'after-init-hook #'global-flycheck-mode)
(setq flycheck-indication-mode 'right-fringe)

(setq dired-use-ls-dired nil)