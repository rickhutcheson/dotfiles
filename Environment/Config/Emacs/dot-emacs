;;; dot-emacs --- Personal Emacs configuration
;; ____________________________________________________________________________

;; Author Rick Hutcheson <rick@oddlyaccurate.com>

;; This file is not part of GNU Emacs.

;;; Commentary
;; Before performing any configuration, we download and
;; install all required packages. Loading config file will have
;; side-effects.

;;; Code
(add-to-list 'load-path "~/Environment/Utilities/Emacs/flycheck")
(add-to-list 'load-path "~/Environment/Utilities/Emacs/tern/emacs")
(add-to-list 'load-path "~/Environment/Utilities/Emacs/async")
(add-to-list 'load-path "~/.emacs.d/CustomModes/cweb.el")
(add-to-list 'load-path "~/Environment/Config/Emacs/CustomModes/")

(defun set-exec-path-from-shell-PATH ()
  "Set `execpath` and PATH environment variable to match user's $PATH."
  (interactive)
  (let ((path-from-shell
         (replace-regexp-in-string
          "[ \t\n]*$" ""(shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(set-exec-path-from-shell-PATH)


;; =====================================================================
;; Packages
;; =====================================================================

(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
       ("melpa" . "https://melpa.org/packages/")))


;; ---------------------------------------------------------------------
;; Required Packages
;; ---------------------------------------------------------------------

(defvar required-package-list
  '(
    ;; appearance
    gruvbox-theme

    ;; general
    backup-walker      ; walk older versions of files
    company            ; auto-completion framework (actively maintained)
    flycheck           ; auto-lint source files (must config for each lang)
    flycheck-pos-tip   ; show error under point
    magit
    simp
    smex

    ;; C
    company-c-headers

    ;; Golang
    go-mode

    ;; HTML & CSS-like
    less-css-mode
    web-mode           ; replaces html-mode

    ;; JavaScript
    web-beautify       ; code beautifying
    js2-mode           ; syntax-highlighting, linting, etc.

    ;; markdown
    markdown-mode
    pandoc-mode

    ;; PHP
    php-mode

    ;; Python
    auto-complete
    python-environment
    jedi

    ;; TeX
    auctex
    company-auctex
    cdlatex
    )
  "Packages installed @ startup")

;; refresh package contents
(defvar needs-packages nil)
(dolist (package required-package-list)
  (unless (package-installed-p package)
    (setq needs-packages t)))

;; install the missing packages
(when needs-packages (package-refresh-contents))

(when needs-packages
  (dolist (package required-package-list)
    (unless (package-installed-p package)
      (package-install package))))


;; =====================================================================
;; general
;; =====================================================================

;; ---------------------------------------------------------------------
;; required packages
;; ---------------------------------------------------------------------
(require 'company)
;(require 'flycheck)
(require 'flymake)
(require 'ido)
(require 'smex)
(require 'simp)


;; ---------------------------------------------------------------------
;; appearance
;; ---------------------------------------------------------------------

;; WINDOWS
;; this is necessary for maximized emacs windows to not have a "gap"
;; at the top / bottom for macOS.
;;
;; From the docs...
;;   > Non-nil means resize frames pixelwise.
;;   > If this option is nil, resizing a frame rounds its sizes to the frame's
;;   > current values of `frame-char-height' and `frame-char-width'.  If this
;;   > is non-nil, no rounding occurs, hence frame sizes can increase/decrease
;;   > by one pixel.

;;   > With some window managers you have to set this to non-nil in order to
;;   > fully maximize frames.  To resize your initial frame pixelwise,
;;   > set this option to a non-nil value in your init file.
(setq frame-resize-pixelwise t)

;; Customize the *window frame* title (actual window manager
;; decoration next to close button, etc.)
;;
;; It's nice to be able to see
;; the full path to the current file, especially when we're deep in
;; inside a repository hierarchy.
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;; SPACES / TABS
(setq-default indent-tabs-mode nil) ; By default, abhor tabs

;;; FONTS
;; Some commonly-used fonts
;; "SF Mono-light"
;; "Terminus-normal"
;; "fixed-9x15-medium"
;; "Monaco-normal"
;; "Operator Mono-semilight"
;; "IntelOne Mono-regular"
;; "Victor Mono-regular"

(setq font-name "Victor Mono-regular")
(setq font-size "30")
(set-frame-font (concat "-*-" font-name "-normal-normal-*-" font-size "-*-*-*-m-0-iso10646-1"))

;; Disable anti-aliasing -- good for bitmap fonts
;; In order for this to take effect, you must use the following command--
;;     defaults write org.gnu.Emacs FontBackend ns
;;
;; (setq mac-allow-anti-aliasing nil)

(setq-default line-spacing 0.05) ;; This is ADDITIONAL line spacing added to standard

;; 80 chars + room for fringe
(add-to-list 'default-frame-alist '(width . 88))

;; dark theme
(load-theme 'gruvbox-dark-hard-2 t)

;; naked emacs
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)
(set-default 'cursor-type '(hbar . 1))

;; Show line numbers (and pad them a little)
(setq display-line-numbers t)
(global-display-line-numbers-mode t)
(column-number-mode t)

(setq mode-line-percent-position nil)
(setq mode-line-position-column-line-format '("%l:%c"))
(setq mode-line-format '("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
                        "  " mode-line-misc-info  mode-line-modes (vc-mode vc-mode) mode-line-end-spaces))

;; Don't use messages that you don't read
(setq initial-scratch-message "")
(setq inhibit-startup-message t)

;; ---------------------------------------------------------------------
;; backup
;; ---------------------------------------------------------------------

;; backup locations
(defconst emacs-tmp-dir  "~/.emacs.d/backups")

(setq backup-directory-alist
      `((".*" . ,emacs-tmp-dir)))
(setq auto-save-file-name-transforms
      `((".*" ,emacs-tmp-dir t)))

(defun force-backup-of-buffer ()
  (setq buffer-backed-up nil))

;; backup behavior
(setq version-control t            ; use versioned backups
      delete-old-versions t
      kept-new-versions 100
      kept-old-versions 100
      backup-by-copying t)         ; don't clobber symlinks

(add-hook 'before-save-hook 'force-backup-of-buffer)

;; ---------------------------------------------------------------------
;; editing
;; ---------------------------------------------------------------------

 ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))

;;; Re-flows a paragraph, redistributing white space. This is required
;;; for at least TeX-mode.
(defun refill-paragraph (&optional region)
  ; this interactive section is required by Emacs, though I don't know why
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (unfill-paragraph region)
  (fill-paragraph nil region))

;; Handy key definition
(define-key global-map "\M-q" 'refill-paragraph)


;; ---------------------------------------------------------------------
;; navigation
;; ---------------------------------------------------------------------

;; Default to the home directory for new files. This used to be the
;; default, but at least on macOS Catalina, this has become the root
;; path.
(setq default-directory "~/")

;; I'm so tied to JetBrains' keymaps at this point
(define-key global-map (kbd "s-[") 'previous-buffer)
(define-key global-map (kbd "s-]") 'next-buffer)

;; Since most of my dotfiles are symlinked from the `dotfiles` repo,
;; this setting allows us to edit them without vc asking whether to
;; follow the symlink each time.
(setq vc-follow-symlinks t)


;; ---------------------------------------------------------------------
;; printing
;; ---------------------------------------------------------------------

;; postscript headers are a bit much
(setq ps-header-lines 1)
(setq ps-print-header nil)
(setq ps-print-header-frame nil)

;; laser printers forever
(setq ps-print-color-p 'black-white)

;; macOS no longer has native PostScript support, so we need a little
;; set of functions to make printing simpler
(defun print-buffer-via-postscripter ()
  (interactive)
  (let (
        (psfile (concat
                 (buffer-file-name (window-buffer (minibuffer-selected-window)))
                 ".ps")))
    (ps-print-buffer-with-faces psfile)
    (shell-command (concat "open -a PostScripter " psfile))))

(defun print-region-via-postscripter ()
  (interactive)
  (let (
        (psfile (concat
                 (buffer-file-name (window-buffer (minibuffer-selected-window)))
                 ".ps")))
    (ps-print-region-with-faces (region-beginning) (region-end) psfile)
    (shell-command (concat "open -a PostScripter " psfile))))

;; ---------------------------------------------------------------------
;; search
;; ---------------------------------------------------------------------
;; Since we use auto-fill mode quite a bit, it's nicer to search for
;; phrases that can span lines.
(setq search-whitespace-regexp "[ \t\r\n]+")

;; ---------------------------------------------------------------------
;; sounds
;; ---------------------------------------------------------------------

(setq visible-bell t)
;; These sounds got annoying

;; (unless (and (fboundp 'play-sound-internal)
;;              (subrp (symbol-function 'play-sound-internal)))
;; (require 'play-sound))

;; (setq ring-bell-function (lambda () (play-sound-file "~/.emacs.d/goron-oop.wav")))
;; (setq ring-bell-function (lambda () (play-sound-file "~/.emacs.d/voltage.wav")))


;; ---------------------------------------------------------------------
;; functions
;; ---------------------------------------------------------------------

(defun layout-django ()
   "Lay out the frame as two 80-column windows."
   (interactive)
   (split-window-right 110)) ; 100 chars + fringe

;; ---------------------------------------------------------------------
;; global hooks
;; ---------------------------------------------------------------------

(add-hook 'before-save-hook 'delete-trailing-whitespace)


;; ---------------------------------------------------------------------
;; global key bindings
;; ---------------------------------------------------------------------
(global-unset-key (kbd "s-L"))
(global-set-key (kbd "s-L") 'goto-line)
(global-set-key (kbd "C-c g") 'magit-status)
;; (setq  x-meta-keysym 'super
;;        x-super-keysym 'meta)
;; (setq
;;  ;; set 'Option' key to SUPER
;;  mac-option-modifier 'super
;;  ;; Set 'CMD' key to 'Meta'
;;  mac-command-modifier 'meta)


;; =====================================================================
;; Mode-Specific Customizations
;; =====================================================================

;; ---------------------------------------------------------------------
;; cscope-mode
;; ---------------------------------------------------------------------
(defcustom current-c-project-directory nil
  "The directory to use as the 'project' directory for cscope projects"
  :type '(string))


(defun visit-linux-file ()
  (interactive)
  (let ((linux-file (concat "~/Repositories/linux" (cadr (split-string (buffer-file-name) "4")))))
    (find-file linux-file)
    ))

(defun setup-cscope-for-project ()
  ;; setup cscope directory
  (message "Trying to setup....")
  (message "min mode? %s  curr-c? ... %s" (bound-and-true-p cscope-minor-mode) current-c-project-directory)
  (when (and (bound-and-true-p cscope-minor-mode)
             current-c-project-directory)
    (message "Yep!!!")
    (cscope-set-initial-directory current-c-project-directory))
  )

(defun add-cscope-hook ()
  (add-hook 'hack-local-variables-hook 'setup-cscope-for-project))

(add-cscope-hook)

(add-hook 'c-mode-hook (function cscope-minor-mode))
(add-hook 'asm-mode-hook (function cscope-minor-mode))
;; This hook is run when the *cscope* buffer is created; I would like
;; to search while focus is here as well.
(add-hook 'cscope-list-entry-hook (function cscope-minor-mode))

;; ---------------------------------------------------------------------
;; C & C++
;; ---------------------------------------------------------------------
;(setq lsp-clangd-binary-path "/Library/Developer/CommandLineTools/usr/bin/clangd")
;; lsp-mode requires these https://emacs-lsp.github.io/lsp-mode/page/performance/
(setq read-process-output-max (* 1024 1024))
(setq gc-cons-threshold 100000000)
;; c++-mode

(add-hook 'c++-mode-hook 'auto-fill-mode)
(add-hook 'c++-mode-hook 'company-mode)
;; auto-fill quotes /parens / braces
(add-hook 'c++-mode-hook 'electric-pair-mode)
;; highlight matching parens
(add-hook 'c++-mode-hook 'show-paren-mode)
(add-hook 'c++-mode-hook
          (lambda ()
            ;; load our custom style file
            ;(load-file "~/.emacs.d/resc-c-style.el")
            ;(c-set-style "resc")
            ;; Add RESC_HOME to our include path for flycheck
            ;; gets everything but trailing newline
            (add-to-list 'flycheck-clang-include-path "/opt/homebrew/include")
            ;; allow completing from #included header files
            (add-to-list 'company-backends 'company-c-headers)
            (add-hook 'flycheck-mode-hook #'flycheck-clang-tidy-setup)

            (setq c-basic-offset 2)
            ;; on macOS, we can setup clang-format
            (when (eq system-type 'darwin)
              ;; find & load clang-format.el
              ;; it lives in the brew prefix for
              ;; find clang-format so we can find clang-format.el
              ;; (note that the shell command ends with a trailing newline we have to strip
              (load (concat
                     (substring (shell-command-to-string "dirname $(dirname $(which clang-format))") 0 -1)
                    "/share/clang/clang-format.el"))
              (add-hook 'before-save-hook
                        'clang-format-buffer
                        t  ; append to existing value
                        t  ; buffer-local (important, since we don't want tof
                        ))
            ))
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c++-mode-hook 'lsp)
(add-hook 'c++-mode-hook
          (lambda ()
            ;; load our custom style file
            ;(load-file "~/.emacs.d/resc-c-style.el")
            ;(c-set-style "resc")
            ;; Add RESC_HOME to our include path for flycheck
            ;; gets everything but trailing newline
            (add-to-list 'flycheck-clang-include-path "/opt/homebrew/include")

            ))


;; ---------------------------------------------------------------------
;; cc-mode
;; ---------------------------------------------------------------------

(setq c-basic-offset 2)

(add-hook 'c-mode-hook 'auto-fill-mode)
(add-hook 'c-mode-hook 'company-mode)
;; auto-fill quotes /parens / braces
(add-hook 'c-mode-hook 'electric-pair-mode)
;; highlight matching parens
(add-hook 'c-mode-hook 'show-paren-mode)
;; display current function in status bar
(add-hook 'c-mode-hook 'which-function-mode)

(add-hook 'c-mode-hook
          (lambda ()
;;             ;; load our custom style file
;;             ;(load-file "~/.emacs.d/resc-c-style.el")
;;             ;(c-set-style "resc")
;;             ;; Add RESC_HOME to our include path for flycheck
;;             ;; gets everything but trailing newline
             ;;             (add-to-list 'flycheck-clang-include-path "/opt/homebrew/include")
             ;; hitting enter should create comment star
             (define-key c-mode-base-map (kbd "RET") 'c-context-line-break)

             ;; allow completing from #included header files
             (add-to-list 'company-backends 'company-c-headers)
             ;(add-hook 'flycheck-mode-hook #'flycheck-clang-tidy-setup)
             (when (not (eq major-mode 'bison-mode))
               (yas-minor-mode)
               (lsp))
;;             (setq c-basic-offset 2)
             ;; on macOS, we can setup clang-format
             (when (and (eq system-type 'darwin)
                        (stringp buffer-file-name)
                        (not (string-match "\\.y\\'" buffer-file-name)
                        ))
               ;; find & load clang-format.el via brew (note that the
               ;; shell result ends with a trailing newline we have to
               ;; strip
               (load (concat
                      (substring (shell-command-to-string "dirname $(dirname $(which clang-format))") 0 -1)
                     "/share/clang/clang-format.el"))
               (add-hook 'before-save-hook
                         'clang-format-buffer
                         t  ; append to existing value
                         t  ; buffer-local (important, since we don't want tof
                         )
               )
             (define-key c-mode-base-map (kbd "s-b") 'lsp-find-definition)
             (define-key c-mode-base-map (kbd "s-B") 'cscope-find-this-symbol)
             ))
;(add-hook 'c-mode-hook 'flycheck-mode)


;; ---------------------------------------------------------------------
;; common lisp
;; ---------------------------------------------------------------------

(setq inferior-lisp-program "/usr/local/bin/clisp")
(add-hook 'lisp-mode-hook 'auto-fill-mode)

;; ---------------------------------------------------------------------
;; company
;; ---------------------------------------------------------------------

(define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
;; don't wait to autocomplete
(setq company-idle-delay 0.05)


;; ---------------------------------------------------------------------
;; dired
;; ---------------------------------------------------------------------

(setq-default dired-use-ls-dired nil)


;; ---------------------------------------------------------------------
;; eshell
;; ---------------------------------------------------------------------

(setq eshell-aliases-file "~/Environment/Config/Emacs/eshell-aliases")


;; ---------------------------------------------------------------------
;; flycheck
;; ---------------------------------------------------------------------

;; ask flycheck to use same load path as emacs
;; otherwise, it complains about third-party (require) calls
(setq-default flycheck-emacs-lisp-load-path 'inherit)

;; (add-hook 'after-init-hook #'global-flycheck-mode)

(setq flycheck-indication-mode 'right-fringe)

(setq flycheck-check-syntax-automatically '(mode-enabled save idle-change))

;; idle time before check in SECONDS
(setq flycheck-idle-change-delay 2)


;; ---------------------------------------------------------------------
;; flycheck-pos
;; ---------------------------------------------------------------------

(with-eval-after-load 'flycheck
  (flycheck-pos-tip-mode))

;; ---------------------------------------------------------------------
;; Golang
;; ---------------------------------------------------------------------

(require 'go-mode)
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

(eval-after-load 'go-mode
  (lambda ()
    (add-hook 'before-save-hook 'gofmt-before-save nil t)))


;; ---------------------------------------------------------------------
;; ido / smex
;; ---------------------------------------------------------------------

(ido-mode t)
(setq ido-enable-flex-matching t)

(smex-initialize)

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)

;; old M-x
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;; ---------------------------------------------------------------------
;; Magit
;; ---------------------------------------------------------------------

(setq magit-revision-insert-related-refs nil)
(setq magit-insert-tags-headers nil)
(setq magit-insert-revision-headers nil)

;; ---------------------------------------------------------------------
;; MMIX (Assembly Language from TAoCP)
;; ---------------------------------------------------------------------

(autoload 'mmix-mode "mmix-mode"
  "Major mode for editing MMIX Assembly files"
  t)
(add-to-list 'auto-mode-alist '("\\.mms\\'" . mmix-mode))

;; ---------------------------------------------------------------------
;; simp
;; ---------------------------------------------------------------------


;; define what a project directory should look like
(simp-project-define
 '(:has (.git)
   :ignore (.git)))
;; customize search behavior; ido is awesome
(setq-default simp-completing-read-command (quote ido-completing-read))

;; keys
(global-set-key (kbd "C-c f") 'simp-project-find-file)
(global-set-key (kbd "C-c d") 'simp-project-root-dired)
(global-set-key (kbd "C-c s") 'simp-project-rgrep)
(global-set-key (kbd "C-c S") 'simp-project-rgrep-dwim)
; (global-set-key (kbd "C-c b") 'simp-project-ibuffer-files-only)
; (global-set-key (kbd "C-c B") 'simp-project-ibuffer)
; (global-set-key (kbd "C-c C-f") 'simp-project-with-bookmark-find-file)
; (global-set-key (kbd "C-c C-s") 'simp-project-with-bookmark-rgrep)
; (global-set-key (kbd "C-c C-b") 'simp-project-with-bookmark-ibuffer)


;; ---------------------------------------------------------------------
;; TeX
;; ---------------------------------------------------------------------
(setq TeX-parse-self t)
(setq TeX-electric-math (cons "$" "$"))

(add-to-list 'auto-mode-alist '("\\.tex\\'" . plain-TeX-mode))
(add-hook 'plain-TeX-mode-hook 'auto-fill-mode)
(add-hook 'plain-TeX-mode-hook 'cdlatex-mode)
;; I can't bear having the quote character broken, so we'll just move
;; this to a completely separate key, which effectively disables the
;; feature.

(setq cdlatex-math-modify-prefix [8388654])

;; Here is how you might configure CDLaTeX to provide environment templates
;; (including automatic labels) for two theorem-like environments.
;; SYNTAX:
;; - "AUTOLABEL" indicates the place where an automatic label should be
;;   inserted, using RefTeX.
;; - The question mark defines the position of the
;;   cursor after the template has been inserted into the buffer.
;;   (setq cdlatex-env-alist
;;      '(("axiom" "\\begin{axiom}\nAUTOLABEL\n?\n\\end{axiom}\n" nil)
;;        ("theorem" "\\begin{theorem}\nAUTOLABEL\n?\n\\end{theorem}\n" nil)))

(setq cdlatex-env-alist
      '(("example"   "\\Example(?)\n\\EndExample\n" nil)
        ("algorithm" "\\Algo ?()\n\\EndAlgo\n"      nil)
        ("diagram"   "\\diagram images/? @ in ()\n" nil)
        ("inlinesquare"   "\\inlinesquare{?}"       nil)
        ))

;; You could also define your own keyword commands "axm" and "thr" to make
;; the template insertion quicker (e.g. `axm<TAB>' and `thm<TAB>'):
;;
;; (setq cdlatex-command-alist
;;  '(("axm" "Insert axiom env"   "" cdlatex-environment ("axiom") t nil)
;;    ("thr" "Insert theorem env" "" cdlatex-environment ("theorem") t nil)))
;;
;; Configuring the commands:
;; The command items in the list are ALSO lists, with 7 parameters
;;   0. KEYWORD     The key that has to be typed into the text.
;;   1. DOCSTRING   A documentation string, less than 60 characters long.
;;   2. REPLACE     The text to be substituted for the keyword, if any.
;;   3. HOOK        A function to be called.
;;   4. ARGS        Optional list of arguments to the function.
;;   5. TEXTFLAG    non-nil means this keyword command is active in textmode.
;;   6. MATHFLAG    non-nil means this keyword command is active in math mode.

(setq cdlatex-command-alist
      ;; KEYWD       DOCSTRING                 TXT-RPLC      FN-REPLACE          FN-ARGS  TXT-MODE? MMODE?
      '(
        ("example"   "Insert Example environment"    ""      cdlatex-environment ("example")      t    nil)
        ("algo"      "Insert Algorithm environment"  ""      cdlatex-environment ("algorithm")    t    nil)
        ("dia"       "Insert diagram here"           ""      cdlatex-environment ("diagram")      t    nil)
        ("sq"        "Insert an inline square here"  ""      cdlatex-environment ("inlinesquare") t    nil)
        ))
;;    ("thr" "Insert theorem env" "" cdlatex-environment ("theorem") t nil)))


;; Each element contains 6 items:
;;   0. key:      The character that is the key for a the accent.
;;   1. mathcmd:  The TeX command associated with the accent in math mode
;;   2. textcmd:  The TeX command associated with the accent in text mode
;;   3. type:     t   if command with argument (e.g. \tilde{a}).
;;                nil if style (e.g. {\cal a}).
;;   4. rmdot:    t   if the dot on i and j has to be removed.
;;   5. it        t   if italic correction is required.
(defconst cdlatex-math-modify-alist-comb-override
  '(
;;;  key    mathcmd                     textcmd    type rmdot italic
    ( ?\.   "\\dot"                     nil           t   t   nil )
    ( ?\:   "\\ddot"                    nil           t   t   nil )
    ( ?\~   "\\tilde"                   nil           t   t   nil )
    ( ?N    "\\widetilde"               nil           t   t   nil )
    ( ?^    "\\hat"                     nil           t   t   nil )
    ( ?H    "\\widehat"                 nil           t   t   nil )
    ( ?\-   "\\bar"                     nil           t   t   nil )
    ( ?T    "\\overline"                nil           t   nil nil )
    ( ?\_   "\\underline"               nil           t   nil nil )
    ( ?\]   "\\overbrace"               nil           t   nil nil )
    ( ?\}   "\\underbrace"              nil           t   nil nil )
    ( ?\>   "\\vec"                     nil           t   t   nil )
    ( ?/    "\\grave"                   nil           t   t   nil )
    ( ?\\   "\\acute"                   nil           t   t   nil )
    ( ?u    "\\breve"                   nil           t   t   nil )
    ( ?h    "\\hbox{?}"                 "\\hbox{?}"   t   nil nil )
    ( ?v    "\\vbox{?}"                 "\\vbox{?}"   t   nil nil )
    ( ?t    "\\hbox{\\t(?)}"            "\\t(?)"      t   nil nil )
    ( ?c    "\\hbox{\\c{?}}"            "\\c{?}"      t   nil nil )
    ( ?a    nil                         "\\aside{?}"  t   nil nil )
    ( ?r    "{\\rm ?}"                  "{\\rm ?}"    nil   nil nil )
    ( ?i    "{\\it ?}"                  "{\\it ?}"    nil   nil nil )
    ( ?l    nil                         "{\\sl ?}"    nil   nil nil )
    ( ?b    "{\\bf ?}"                  "{\\bf ?}"    nil   nil nil )
    ( ?y    "{\\tt ?}"                  "{\\tt ?}"    nil   nil nil )
    ( ?0    "\\textstyle"               nil           nil nil nil )
    ( ?1    "\\displaystyle"            nil           nil nil nil )
    ( ?2    "\\scriptstyle"             nil           nil nil nil )
    ( ?3    "\\scriptscriptstyle"       nil           nil nil nil )
    ( ?\(   "\\left( ? \\right)"        nil           nil nil nil )
    ( ?\[   "\\left[ ? \\right]"        nil           nil nil nil )
    ( ?\{   "\\left\\{ ? \\right\\}"    nil           nil nil nil )
    ( ?<    "\\left< ? \\right>"        nil           nil nil nil )
    ( ?|    "\\left| ? \\right|"        nil           nil nil nil )
    ;;( ?m    "\\mbox"              nil        t   nil nil )
    ;;( ?e    "\\mathem"            "\\emph"   t   nil nil )
    ;;( ?f    "\\mathsf"            "\\textsf" t   nil nil )
    ;;( ?v    "\\check"                   nil           t   t   nil )
  )
  "Default for `cdlatex-math-modify-alist'.")


(add-hook 'cdlatex-mode-hook
          (lambda ()
            (set 'cdlatex-math-modify-alist-comb
                 cdlatex-math-modify-alist-comb-override)))

(defun wrap-region-with-delim (b e tag)
  "'tag' a region"
  (interactive "r\nMTag for region: ")
  (let ((e (copy-marker e)))
    (goto-char b)
    (insert (format "%s" tag))
    (goto-char e)
    (insert (format "%s" tag))))


;; =====================================================================
;; Emacs lisp
;; =====================================================================

(add-to-list 'auto-mode-alist '("\\.emacs\\'" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("\\dot-emacs\\'" . emacs-lisp-mode))


;; =====================================================================
;; HTML & CSS-like
;; =====================================================================

;; ---------------------------------------------------------------------
;; css-mode
;; ---------------------------------------------------------------------

(setq-default css-indent-offset 4)

(eval-after-load 'css-mode
  (lambda ()
    (define-key css-mode-map (kbd "C-c b") 'web-beautify-css)
    ))

;; ---------------------------------------------------------------------
;; web-mode
;; ---------------------------------------------------------------------

(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.twig\\'" . web-mode))
(setq web-mode-markup-indent-offset 2)
(eval-after-load 'web-mode
  (lambda ()
    (define-key web-mode-map (kbd "C-c b") 'web-beautify-html)))


;; =====================================================================
;; JavaScript
;; =====================================================================

;; ---------------------------------------------------------------------
;; js2-mode
;; ---------------------------------------------------------------------

;; associate with '.js' files
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(setq-default js2-basic-offset 2)


;; ---------------------------------------------------------------------
;; web-beautify
;; ---------------------------------------------------------------------

;; This constant is internal to web-beautify, but I haven't found
;; another way to define options *globally*
(defconst web-beautify-args '("-s" "4" "-w" "80" "-f" "-"))

;; automatic checking
(add-hook 'js2-mode-hook 'flycheck-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
(setq js2-highlight-level 3)
;; auto-beautify on save
(eval-after-load 'js2-mode
  (lambda ()
    (require 'web-beautify)
    (define-key js2-mode-map (kbd "C-c b") 'web-beautify-js)))


;; ---------------------------------------------------------------------
;; tern
;; ---------------------------------------------------------------------

(autoload 'tern-mode "tern.el" nil t)
(add-hook 'js-mode-hook (lambda () (tern-mode t)))

(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))

;; =====================================================================
;; markdown
;; =====================================================================

(setq-default markdown-command "pandoc")
(setq-default markdown-open-command "/usr/local/bin/mark")
(add-hook 'markdown-mode-hook 'auto-fill-mode)
;;
;; Source: https://emacs.stackexchange.com/a/3500
(defun tag-word-or-region (text-begin text-end)
  "Surround current word or region with given text."
  (interactive "sStart tag: \nsEnd tag: ")
  (let (pos1 pos2 bds)
    (if (and transient-mark-mode mark-active)
        (progn
          (goto-char (region-end))
          (insert text-end)
          (goto-char (region-beginning))
          (insert text-begin)
          (goto-char (region-end))
          (dotimes (i (* 3 (length text-end)))
          (forward-char)))
      (progn
        (setq bds (bounds-of-thing-at-point 'symbol))
        (goto-char (cdr bds))
        (insert text-end)
        (goto-char (car bds))
        (insert text-begin)
        ;; Addition: move to end of region, then past all the text inserted
        ;; This requires us to move past both prefix & suffix strings
        (goto-char (cdr bds))
        (dotimes (i (+ (length text-start) (length text-end)))
          (forward-char))))))

(defun md-bold-selection ()
  (interactive)
  (tag-word-or-region "**" "**"))

(defun md-italic-selection ()
  (interactive)
  (tag-word-or-region "*" "*"))

(defun md-insert-slash ()
  (interactive)
  (insert (char-from-name "SLASH")))

(eval-after-load 'markdown-mode
  (lambda ()
    (define-key markdown-mode-map (kbd "/ /") 'md-insert-slash)
    (define-key markdown-mode-map (kbd "/ b") 'md-bold-selection)
    (define-key markdown-mode-map (kbd "/ i") 'md-italic-selection)))



;; =====================================================================
;; PDF Tools
;; =====================================================================

; Incompatible w/ display-line-numbers-mode
(add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode 0)))

;; =====================================================================
;; Python
;; =====================================================================

;; Popup on errors
(setq py-python-command "python3")
(setq-default python-inent-offset 4)
(setq-default python-indent-offset 4)

;; autocomplete
(require 'python-environment)
(defun my/python-mode-hook ()
  ;(add-to-list 'company-backends 'company-jedi))
  ;(add-hook 'python-mode-hook 'my/python-mode-hook)
;(setq jedi:environment-virtualenv
;      '("/rick/Environment/Utilities/Python/Envs/taocp/bin/virtualenv"))
  ;(add-hook 'python-mode-hook
   ;       (lambda() (define-key python-mode-map (kbd "s-b") 'jedi:goto-definition)))
)


;; ---------------------------------------------------------------------
;; required variables
;; ---------------------------------------------------------------------


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cdlatex-math-modify-prefix 47 t)
 '(column-number-mode t)
 '(company-c-headers-path-user
   '("/opt/homebrew/include" "/opt/homebrew/include/CUnit" "/Users/rick/Repositories/learningc/cii/include"))
 '(company-clang-arguments
   '("-I/rick/Repositories/resC/src" "-I/rick/Repositories/resC/src/base" "-I/rick/Repositories/kilo/src/components"))
 '(cscope-browse-without-preview t)
 '(cscope-indexer-suffixes '("*.[chlysS]" "*.[ch]xx" "*.[ch]pp" "*.cc" "*.hh") nil nil "Allow assembly files too")
 '(custom-safe-themes
   '("297e7e10121ab4ae4320a1a50a2cbd4eabf8db045d170aa002e46ab24f045873" "046a2b81d13afddae309930ef85d458c4f5d278a69448e5a5261a5c78598e012" "d445c7b530713eac282ecdeea07a8fa59692c83045bf84dd112dd738c7bcad1d" "a5270d86fac30303c5910be7403467662d7601b821af2ff0c4eb181153ebfc0a" "7b8f5bbdc7c316ee62f271acf6bcd0e0b8a272fdffe908f8c920b0ba34871d98" "41020bc5a5547dbc5eaf2554d188f516cc5d3b80fd5d5ad804444135a6abf5f4" "f149d9986497e8877e0bd1981d1bef8c8a6d35be7d82cba193ad7e46f0989f6a" "bb08c73af94ee74453c90422485b29e5643b73b05e8de029a6909af6a3fb3f58" "90a6f96a4665a6a56e36dec873a15cbedf761c51ec08dd993d6604e32dd45940" "6b5c518d1c250a8ce17463b7e435e9e20faa84f3f7defba8b579d4f5925f60c1" "7661b762556018a44a29477b84757994d8386d6edee909409fabe0631952dad9" "83e0376b5df8d6a3fbdfffb9fb0e8cf41a11799d9471293a810deb7586c131e6" "d14f3df28603e9517eb8fb7518b662d653b25b26e83bd8e129acea042b774298" "b89ae2d35d2e18e4286c8be8aaecb41022c1a306070f64a66fd114310ade88aa" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "1436d643b98844555d56c59c74004eb158dc85fc55d2e7205f8d9b8c860e177f" "d91ef4e714f05fff2070da7ca452980999f5361209e679ee988e3c432df24347" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "0598c6a29e13e7112cfbc2f523e31927ab7dce56ebb2016b567e1eff6dc1fd4f" "a22f40b63f9bc0a69ebc8ba4fbc6b452a4e3f84b80590ba0a92b4ff599e53ad0" "585942bb24cab2d4b2f74977ac3ba6ddbd888e3776b9d2f993c5704aa8bb4739" "8f97d5ec8a774485296e366fdde6ff5589cf9e319a584b845b6f7fa788c9fa9a" "8d805143f2c71cfad5207155234089729bb742a1cb67b7f60357fdd952044315" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" default))
 '(ede-project-directories '("/Users/rick/Repositories/learningc/kilo"))
 '(mode-line-format
   '("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position "  " mode-line-misc-info mode-line-modes
     (vc-mode vc-mode)
     mode-line-end-spaces))
 '(mode-line-percent-position nil)
 '(mode-line-position-column-line-format '("%l:%c"))
 '(package-selected-packages
   '(backup-walker gnu-elpa-keyring-update sr-speedbar xcscope lsp-ui bats-mode buffer-move pdf-tools timu-rouge-theme company-auctex cdlatex auctex graphviz-dot-mode bison-mode c-eldoc project xref lsp-mode flycheck-clang-tidy material-theme speed-type scala-mode graphql-mode yaml-mode python-black company-jedi tern-auto-complete tern darkroom kotlin-mode spacemacs-theme spacegray-theme jedi python-environment auto-complete js2-mode go-mode slime-company slime solarized-theme gruvbox-theme company-c-headers company sublimity writeroom-mode csv-mode sphinx-doc sphinx-mode flycheck-pycheckers pyvenv ein color-theme-sanityinc-tomorrow web-beautify lua-mode smex web-mode simp railscasts-theme php-mode pandoc-mode markdown-mode magit less-css-mode flycheck-pos-tip))
 '(safe-local-variable-values
   '((current-c-project-directory . "/home/rick/Repositories/linux")
     (current-c-project-directory . "/data/Projects/bootlin-course/linux")
     (current-c-project-directory "/data/Projects/bootlin-course/linux"))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
